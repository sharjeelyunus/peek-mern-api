{"version":3,"sources":["shared/util/validators.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","shared/components/FormElements/Input.js","shared/hooks/form-hook.js","shared/components/FormElements/ImageUpload.js","user/pages/Auth.js"],"names":["VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","type","VALIDATOR_MINLENGTH","val","VALIDATOR_EMAIL","validate","value","validators","isValid","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","validator","trim","test","inputReducer","state","action","isTouched","Input","props","useReducer","initialValue","initialValid","inputState","dispatch","id","onInput","useEffect","changeHandler","event","target","touchHandler","element","placeholder","onChange","onBlur","rows","className","htmlFor","label","errorText","formReducer","formIsValid","inputId","inputs","useForm","initialInputs","initailFormValidity","formState","useCallback","inputData","formValidity","ImageUpload","useState","file","setFile","previewUrl","setPreviewUrl","setIsValid","filePickerRef","useRef","fileReader","FileReader","onload","result","readAsDataURL","ref","style","display","accept","pickedFile","fileIsValid","files","center","src","alt","Button","onClick","current","click","Auth","auth","useContext","AuthContext","isLoginMode","setIsLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","email","password","inputHandler","setFormData","authSubmitHandler","a","preventDefault","process","JSON","stringify","responseData","login","userId","token","formData","FormData","append","name","image","Fragment","ErrorModal","onClear","Card","LoadingSpinner","asOverlay","onSubmit","disabled","inverse","undefined","prevMode"],"mappings":"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","file":"static/js/5.0b522c27.chunk.js","sourcesContent":["const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\r\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\r\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\r\nconst VALIDATOR_TYPE_MIN = 'MIN';\r\nconst VALIDATOR_TYPE_MAX = 'MAX';\r\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\r\nconst VALIDATOR_TYPE_FILE = 'FILE';\r\n\r\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\r\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\r\nexport const VALIDATOR_MINLENGTH = val => ({\r\n    type: VALIDATOR_TYPE_MINLENGTH,\r\n    val: val\r\n});\r\nexport const VALIDATOR_MAXLENGTH = val => ({\r\n    type: VALIDATOR_TYPE_MAXLENGTH,\r\n    val: val\r\n});\r\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\r\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\r\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\r\n\r\nexport const validate = (value, validators) => {\r\n    let isValid = true;\r\n    for (const validator of validators) {\r\n        if (validator.type === VALIDATOR_TYPE_REQUIRE) {\r\n            isValid = isValid && value.trim().length > 0;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\r\n            isValid = isValid && value.trim().length >= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\r\n            isValid = isValid && value.trim().length <= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MIN) {\r\n            isValid = isValid && +value >= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MAX) {\r\n            isValid = isValid && +value <= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_EMAIL) {\r\n            isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\r\n        }\r\n    }\r\n    return isValid;\r\n};\r\n","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import React, { useReducer, useEffect } from 'react';\r\n\r\nimport { validate } from '../../util/validators';\r\nimport './Input.css';\r\n\r\nconst inputReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'CHANGE':\r\n            return {\r\n                ...state,\r\n                value: action.val,\r\n                isValid: validate(action.val, action.validators)\r\n            };\r\n        case 'TOUCH': {\r\n            return {\r\n                ...state,\r\n                isTouched: true\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst Input = props => {\r\n    const [inputState, dispatch] = useReducer(inputReducer, {\r\n        value: props.initialValue || '',\r\n        isTouched: false,\r\n        isValid: props.initialValid || false\r\n    });\r\n\r\n    const { id, onInput } = props;\r\n    const { value, isValid } = inputState;\r\n\r\n    useEffect(() => {\r\n        onInput(id, value, isValid)\r\n    }, [id, value, isValid, onInput]);\r\n\r\n    const changeHandler = event => {\r\n        dispatch({\r\n            type: 'CHANGE',\r\n            val: event.target.value,\r\n            validators: props.validators\r\n        });\r\n    };\r\n\r\n    const touchHandler = () => {\r\n        dispatch({\r\n            type: 'TOUCH'\r\n        });\r\n    };\r\n\r\n    const element =\r\n        props.element === 'input' ? (\r\n            <input\r\n                id={props.id}\r\n                type={props.type}\r\n                placeholder={props.placeholder}\r\n                onChange={changeHandler}\r\n                onBlur={touchHandler}\r\n                value={inputState.value}\r\n            />\r\n        ) : (\r\n                <textarea\r\n                    id={props.id}\r\n                    rows={props.rows || 3}\r\n                    onChange={changeHandler}\r\n                    onBlur={touchHandler}\r\n                    value={inputState.value}\r\n                />\r\n            );\r\n\r\n    return (\r\n        <div\r\n            className={`form-control ${!inputState.isValid && inputState.isTouched &&\r\n                'form-control--invalid'}`}\r\n        >\r\n            <label htmlFor={props.id}>{props.label}</label>\r\n            {element}\r\n            {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Input;\r\n","import { useCallback, useReducer } from 'react';\r\n\r\nconst formReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'INPUT_CHANGE':\r\n            let formIsValid = true;\r\n            for (const inputId in state.inputs) {\r\n                if (!state.inputs[inputId]) {\r\n                    continue;\r\n                }\r\n                if (inputId === action.inputId) {\r\n                    formIsValid = formIsValid && action.isValid;\r\n                } else {\r\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                inputs: {\r\n                    ...state.inputs,\r\n                    [action.inputId]: { value: action.value, isValid: action.isValid }\r\n                },\r\n                isValid: formIsValid\r\n            };\r\n            case 'SET_DATA':\r\n                return {\r\n                    inputs: action.inputs,\r\n                    isValid: action.formIsValid\r\n                };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const useForm = (initialInputs, initailFormValidity) => {\r\n    const [formState, dispatch] = useReducer(formReducer, {\r\n        inputs: initialInputs,\r\n        isValid: initailFormValidity\r\n    });\r\n\r\n    const inputHandler = useCallback((id, value, isValid) => {\r\n        dispatch({\r\n          type: 'INPUT_CHANGE',\r\n          value: value,\r\n          isValid: isValid,\r\n          inputId: id\r\n        });\r\n      }, []);\r\n\r\n      const setFormData = useCallback((inputData, formValidity) => {\r\n          dispatch({\r\n              type: 'SET_DATA',\r\n              inputs: inputData,\r\n              formIsValid: formValidity\r\n          })\r\n      }, []);\r\n\r\n      return [formState, inputHandler, setFormData];\r\n};","import React, { useRef, useState, useEffect } from 'react';\r\n\r\nimport Button from './Button';\r\nimport './ImageUpload.css';\r\n\r\nconst ImageUpload = props => {\r\n    const [file, setFile] = useState();\r\n    const [previewUrl, setPreviewUrl] = useState();\r\n    const [isValid, setIsValid] = useState(false);\r\n\r\n    const filePickerRef = useRef();\r\n\r\n    useEffect(() => {\r\n        if (!file) {\r\n            return;\r\n        }\r\n        const fileReader = new FileReader();\r\n        fileReader.onload = () => {\r\n            setPreviewUrl(fileReader.result);\r\n        };\r\n        fileReader.readAsDataURL(file);\r\n    }, [file]);\r\n\r\n    const pickedHandler = event => {\r\n        let pickedFile;\r\n        let fileIsValid = isValid;\r\n        if (event.target.files && event.target.files.length === 1) {\r\n            pickedFile = event.target.files[0];\r\n            setFile(pickedFile);\r\n            setIsValid(true);\r\n            fileIsValid = true;\r\n        } else {\r\n            setIsValid(false);\r\n            fileIsValid = false;\r\n        }\r\n        props.onInput(props.id, pickedFile, fileIsValid);\r\n    };\r\n\r\n    const pickImageHandler = () => {\r\n        filePickerRef.current.click();\r\n    };\r\n\r\n    return (\r\n        <div className=\"form-control\">\r\n            <input\r\n                id={props.id}\r\n                ref={filePickerRef}\r\n                style={{ display: 'none' }}\r\n                type=\"file\"\r\n                accept=\".jpg,.png,.jpeg\"\r\n                onChange={pickedHandler}\r\n            />\r\n            <div className={`image-upload ${props.center && 'center'}`}>\r\n                <div className=\"image-upload__preview\">\r\n                    {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\r\n                    {!previewUrl && <p>Please pick an image.</p>}\r\n                </div>\r\n                <Button type=\"button\" onClick={pickImageHandler}>\r\n                    PICK IMAGE\r\n        </Button>\r\n            </div>\r\n            {!isValid && <p>{props.errorText}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageUpload;","import React, { useState, useContext } from 'react';\r\n\r\nimport Card from '../../shared/components/UIelements/Card';\r\nimport Input from '../../shared/components/FormElements/Input';\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport ErrorModal from '../../shared/components/UIelements/ErrorModal';\r\nimport LoadingSpinner from '../../shared/components/UIelements/LoadingSpinner';\r\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\r\nimport {\r\n    VALIDATOR_EMAIL,\r\n    VALIDATOR_MINLENGTH,\r\n    VALIDATOR_REQUIRE\r\n} from '../../shared/util/validators';\r\nimport { useForm } from '../../shared/hooks/form-hook';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport './Auth.css';\r\n\r\nconst Auth = () => {\r\n    const auth = useContext(AuthContext);\r\n    const [isLoginMode, setIsLoginMode] = useState(true);\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n    const [formState, inputHandler, setFormData] = useForm(\r\n        {\r\n            email: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            password: {\r\n                value: '',\r\n                isValid: false\r\n            }\r\n        },\r\n        false\r\n    );\r\n\r\n    const switchModeHandler = () => {\r\n        if (!isLoginMode) {\r\n            setFormData(\r\n                {\r\n                    ...formState.inputs,\r\n                    name: undefined,\r\n                    image: undefined\r\n                },\r\n                formState.inputs.email.isValid && formState.inputs.password.isValid\r\n            );\r\n        } else {\r\n            setFormData(\r\n                {\r\n                    ...formState.inputs,\r\n                    name: {\r\n                        value: '',\r\n                        isValid: false\r\n                    },\r\n                    image: {\r\n                        value: null,\r\n                        isValid: false\r\n                    }\r\n                },\r\n                false\r\n            );\r\n        }\r\n        setIsLoginMode(prevMode => !prevMode);\r\n    };\r\n\r\n    const authSubmitHandler = async event => {\r\n        event.preventDefault();\r\n\r\n        if (isLoginMode) {\r\n            try {\r\n                const responseData = await sendRequest(\r\n                    process.env.REACT_APP_BACKEND_URL + '/users/login',\r\n                    'POST',\r\n                    JSON.stringify({\r\n                        email: formState.inputs.email.value,\r\n                        password: formState.inputs.password.value\r\n                    }),\r\n                    {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                );\r\n                auth.login(responseData.userId, responseData.token);\r\n            } catch (err) { }\r\n        } else {\r\n            try {\r\n                const formData = new FormData();\r\n                formData.append('email', formState.inputs.email.value);\r\n                formData.append('name', formState.inputs.name.value);\r\n                formData.append('password', formState.inputs.password.value);\r\n                formData.append('image', formState.inputs.image.value);\r\n                const responseData = await sendRequest(\r\n                    process.env.REACT_APP_BACKEND_URL + '/users/signup',\r\n                    'POST',\r\n                    formData\r\n                );\r\n\r\n                auth.login(responseData.userId, responseData.token);\r\n            } catch (err) { }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ErrorModal error={error} onClear={clearError} />\r\n            <Card className=\"authentication\">\r\n                {isLoading && <LoadingSpinner asOverlay />}\r\n                <h2>Login Required</h2>\r\n                <hr />\r\n                <form onSubmit={authSubmitHandler}>\r\n                    {!isLoginMode && (\r\n                        <Input\r\n                            element=\"input\"\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            label=\"Your Name\"\r\n                            validators={[VALIDATOR_REQUIRE()]}\r\n                            errorText=\"Please enter a name.\"\r\n                            onInput={inputHandler}\r\n                        />\r\n                    )}\r\n                    {!isLoginMode && (\r\n                        <ImageUpload\r\n                            center\r\n                            id=\"image\"\r\n                            onInput={inputHandler}\r\n                            errorText=\"Please provide an image.\"\r\n                        />\r\n                    )}\r\n                    <Input\r\n                        element=\"input\"\r\n                        id=\"email\"\r\n                        type=\"email\"\r\n                        label=\"E-Mail\"\r\n                        validators={[VALIDATOR_EMAIL()]}\r\n                        errorText=\"Please enter a valid email address.\"\r\n                        onInput={inputHandler}\r\n                    />\r\n                    <Input\r\n                        element=\"input\"\r\n                        id=\"password\"\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        validators={[VALIDATOR_MINLENGTH(6)]}\r\n                        errorText=\"Please enter a valid password, at least 6 characters.\"\r\n                        onInput={inputHandler}\r\n                    />\r\n                    <Button type=\"submit\" disabled={!formState.isValid}>\r\n                        {isLoginMode ? 'LOGIN' : 'SIGNUP'}\r\n                    </Button>\r\n                </form>\r\n                <Button inverse onClick={switchModeHandler}>\r\n                    SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'}\r\n                </Button>\r\n            </Card>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Auth;\r\n"],"sourceRoot":""}